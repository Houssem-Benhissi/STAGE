package com.example.stage;

import android.content.DialogInterface;
import android.database.Cursor;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.List;

public class TechnicianActivity extends AppCompatActivity {

    private DBConnect dbConnect;
    private ListView technicianListView;
    private ArrayAdapter<String> adapter;
    private List<Technician> technicians = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_technician);

        dbConnect = new DBConnect(this);
        technicianListView = findViewById(R.id.technicianListView);

        loadTechnicians();  // Load initial data

        Button addButton = findViewById(R.id.addTechnicianButton);
        addButton.setOnClickListener(v -> showAddTechnicianDialog());

        // Removed individual modify and delete button listeners

        technicianListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Technician selectedTechnician = technicians.get(position);
                showModifyDeleteDialog(selectedTechnician);
            }
        });
    }

    private void loadTechnicians() {
        Cursor cursor = dbConnect.getAllTechnicians();
        technicians.clear();
        if (cursor != null && cursor.moveToFirst()) {
            do {
                int id = cursor.getInt(cursor.getColumnIndexOrThrow("id"));
                String name = cursor.getString(cursor.getColumnIndexOrThrow("name"));
                String specialty = cursor.getString(cursor.getColumnIndexOrThrow("specialty"));
                technicians.add(new Technician(id, name, specialty));
            } while (cursor.moveToNext());
            cursor.close();
        }
        updateListView();
    }

    private void updateListView() {
        List<String> technicianNames = new ArrayList<>();
        for (Technician technician : technicians) {
            technicianNames.add(technician.getName() + " (" + technician.getSpecialty() + ")");
        }
        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, technicianNames);
        technicianListView.setAdapter(adapter);
    }


    private void showAddTechnicianDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Add Technician");

        // Inflate a layout for the dialog (you'll need to create dialog_add_technician.xml)
        View view = LayoutInflater.from(this).inflate(R.layout.dialog_add_technician, null);
        EditText nameEditText = view.findViewById(R.id.technicianNameEditText);
        EditText specialtyEditText = view.findViewById(R.id.technicianSpecialtyEditText);
        builder.setView(view);

        builder.setPositiveButton("Add", (dialog, which) -> {
            String name = nameEditText.getText().toString().trim();
            String specialty = specialtyEditText.getText().toString().trim();
            if (!name.isEmpty() && !specialty.isEmpty()) {
                Technician newTechnician = new Technician(0, name, specialty); // ID will be auto-generated by DB
                long newId = dbConnect.addTechnician(newTechnician);
                if (newId != -1) {
                    newTechnician.setId((int) newId); // Set the generated ID
                    technicians.add(newTechnician);
                    updateListView();
                    Toast.makeText(this, "Technician added", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, "Failed to add technician", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(this, "Please enter name and specialty", Toast.LENGTH_SHORT).show();
            }
        });

        builder.setNegativeButton("Cancel", null);
        builder.show();
    }

    private void showModifyDeleteDialog(Technician selectedTechnician) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Choose Action");
        String[] options = {"Modify", "Delete", "Cancel"};
        builder.setItems(options, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                switch (which) {
                    case 0:
                        showModifyTechnicianDialog(selectedTechnician);
                        break;
                    case 1:
                        showDeleteTechnicianDialog(selectedTechnician);
                        break;
                }
            }
        });
        builder.show();
    }


    private void showModifyTechnicianDialog(Technician technicianToModify) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Modify Technician");

        View view = LayoutInflater.from(this).inflate(R.layout.dialog_add_technician, null);
        EditText nameEditText = view.findViewById(R.id.technicianNameEditText);
        EditText specialtyEditText = view.findViewById(R.id.technicianSpecialtyEditText);
        nameEditText.setText(technicianToModify.getName());
        specialtyEditText.setText(technicianToModify.getSpecialty());
        builder.setView(view);

        builder.setPositiveButton("Update", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String name = nameEditText.getText().toString().trim();
                String specialty = specialtyEditText.getText().toString().trim();
                if (!name.isEmpty() && !specialty.isEmpty()) {
                    technicianToModify.setName(name);
                    technicianToModify.setSpecialty(specialty);
                    int rowsAffected = dbConnect.updateTechnician(technicianToModify);
                    if (rowsAffected > 0) {
                        updateListView();
                        Toast.makeText(TechnicianActivity.this, "Technician updated", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(TechnicianActivity.this, "Failed to update technician", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(TechnicianActivity.this, "Please enter name and specialty", Toast.LENGTH_SHORT).show();
                }
            }
        });

        builder.setNegativeButton("Cancel", null);
        builder.show();
    }

    private void showDeleteTechnicianDialog(Technician technicianToDelete) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Delete Technician");
        builder.setMessage("Are you sure you want to delete " + technicianToDelete.getName() + "?");

        builder.setPositiveButton("Delete", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                int rowsAffected = dbConnect.deleteTechnician(technicianToDelete.getId());
                if (rowsAffected > 0) {
                    technicians.remove(technicianToDelete);
                    updateListView();
                    Toast.makeText(TechnicianActivity.this, "Technician deleted", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(TechnicianActivity.this, "Failed to delete technician", Toast.LENGTH_SHORT).show();
                }
            }
        });

        builder.setNegativeButton("Cancel", null);
        builder.show();
    }
}